const vm = require('vm');
const got = require('got');
const jetpack = require('fs-jetpack');

Promise.resolve()
  .then(() => jetpack.remove('./dist'))
  .then(() => {
    return jetpack.copyAsync('./node_modules/prismjs/components', './dist/languages/', {
      matching: ['*.min.js', '!prism-core.min.js']
    })
  })
  .then(() => {
    return jetpack.copyAsync('./node_modules/prismjs/components/prism-core.min.js', './dist/prism-core.min.js');
  })
  .then(() => {
    let prismVersion = jetpack.read('./package.json', 'json').devDependencies.prismjs;
    return got(`https://raw.githubusercontent.com/PrismJS/prism/v${prismVersion}/components.js`);
  })
  .then(response => {
    let sandbox = {};
    vm.runInNewContext(response.body, sandbox);

    if (!sandbox.components || !sandbox.components.languages) {
      throw new Error('componenets.js file changed it\'s structure the update code needs to be changed');
    }

    return Promise.resolve(sandbox.components.languages);
  })
  .then(languages => {
    let dependencies = {};

    for (let language in languages) {
      dependencies[language] = getDependencies(languages, language);
    }

    return Promise.resolve({
      languages: languages,
      dependencies: dependencies
    });
  })
  .then(state => {
    // loads Prism into the global object
    require('./dist/prism-core.min.js');

    for (let key in state.dependencies) {
      state.dependencies[key].forEach(language => {
        let languagePath = `./dist/languages/prism-${language}.min.js`;
        if (jetpack.exists(languagePath)) {
          require(languagePath);
        }
      });
    }

    return Promise.resolve(state);
  })
  .then(state => {
    var code = '// This file is dynamically generated by update.js\n\n';
    code += 'module.exports = {\n';

    for (let language in Prism.languages) {
      let rootLanguage = state.languages[language]
        ? language
        : Object.keys(state.languages).find(value => Prism.languages[value] == Prism.languages[language]);

      if (rootLanguage) {
        code += `  '${language}': '${rootLanguage}',\n`;
      }
    }

    code += '};';

    jetpack.write('./dist/languages.js', code);

    return Promise.resolve(state);
  })
  .then(state => {
    var code = '// This file is dynamically generated by update.js\n\n';
    code += 'module.exports = {\n';

    for (let language in state.dependencies) {
      code += `  '${language}': ${JSON.stringify(state.dependencies[language])},\n`;
    }

    code += '};';

    jetpack.write('./dist/dependencies.js', code);
  });

function getDependencies(languages, language) {
  let dependencies = [language];

  while (languages[language].require) {
    language = languages[language].require;

    if (Array.isArray(language)) {
      language.forEach(name => {
        dependencies.unshift(name);
        dependencies.push(...getDependencies(languages, name));
      });
      break;
    } else {
      dependencies.unshift(language);
    }
  }

  return dependencies;
}
